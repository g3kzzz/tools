#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
shell_safe_template.py — CLI template + interactive prompt (SIMULATOR, DOES NOT EXECUTE REMOTE COMMANDS)
Creator: g3kzzz    https://github.com/g3kzzz
Purpose: Secure template for developing an interactive CLI client that parses cookies,
         shows a purple prompt, supports Ctrl+L, has history and writes a local log.
WARNING: This script DOES NOT send HTTP requests or execute remote commands.
         It only simulates and stores in 'session.log' what *would be sent*.
"""

import os
import sys
import time
import argparse
from base64 import b64encode
from random import randrange
from datetime import datetime

# Try to use prompt_toolkit for a better experience
USE_PROMPT_TOOLKIT = False
try:
    from prompt_toolkit import PromptSession
    from prompt_toolkit.key_binding import KeyBindings
    from prompt_toolkit.history import InMemoryHistory
    USE_PROMPT_TOOLKIT = True
except Exception:
    USE_PROMPT_TOOLKIT = False

# ---------- Colors ----------
MAGENTA = "\033[95m"
BOLD = "\033[1m"
RESET = "\033[0m"
CLEAR_SCREEN = "\033[2J\033[H"

def color(txt):
    return f"{MAGENTA}{txt}{RESET}"

def color_bold(txt):
    return f"{MAGENTA}{BOLD}{txt}{RESET}"

# ---------- Cookies parser ----------
def load_cookies_simple(path):
    """
    Expected format: key=value per line.
    Returns a dict.
    """
    cookies = {}
    try:
        with open(path, "r", encoding="utf-8") as fh:
            for i, line in enumerate(fh, start=1):
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                if "=" not in line:
                    print(f"[!] Ignored (line {i}): does not contain '=' -> {line}")
                    continue
                k, v = line.split("=", 1)
                k = k.strip()
                v = v.strip()
                if not k:
                    print(f"[!] Ignored (line {i}): empty key.")
                    continue
                cookies[k] = v
    except FileNotFoundError:
        raise
    return cookies

# ---------- Utilities ----------
def get_username_and_hostname():
    username = os.getenv("USER") or "g3kzzz"
    try:
        hostname = os.uname()[1]
    except Exception:
        hostname = "localhost"
    return username, hostname

def nice_cwd():
    cd = os.getcwd()
    home = os.path.expanduser("~")
    return "~" if cd == home else cd

# ---------- Send simulation ----------
def build_payload_simulation(command):
    """
    Returns a simulated representation of the payload that *would be sent*.
    (e.g.: base64 -> shell)
    """
    encoded = b64encode(command.encode("utf-8")).decode("utf-8")
    simulated = f'echo "{encoded}" | base64 -d | sh'
    return simulated

# ---------- Local logging ----------
LOGFILE = "session.log"

def log_simulation(url, cookies, command, simulated_payload):
    ts = datetime.utcnow().isoformat() + "Z"
    with open(LOGFILE, "a", encoding="utf-8") as f:
        f.write(f"--- {ts} ---\n")
        f.write(f"URL: {url}\n")
        f.write(f"COOKIES: {cookies}\n")
        f.write(f"CMD: {command}\n")
        f.write(f"SIMULATED_PAYLOAD: {simulated_payload}\n\n")

# ---------- Interactive prompt ----------
def interactive_loop(url, cookies, interval):
    username, hostname = get_username_and_hostname()

    # Configure prompt_toolkit if available
    if USE_PROMPT_TOOLKIT:
        kb = KeyBindings()
        @kb.add("c-l")
        def _(event):
            "Ctrl+L clears the screen"
            sys.stdout.write(CLEAR_SCREEN)
            sys.stdout.flush()
        session = PromptSession(history=InMemoryHistory(), key_bindings=kb)
        prompt_func = lambda p: session.prompt(p)
    else:
        # Simple fallback: input()
        def prompt_func(p):
            try:
                return input(p)
            except EOFError:
                raise
            except KeyboardInterrupt:
                raise

    print(color_bold(f"Creator: g3kzzz — https://github.com/g3kzzz"))
    print(color(f"SIMULATION MODE — nothing will be executed remotely\nTarget URL (informational): {url}"))
    if cookies:
        print(color(f"Cookies loaded: {len(cookies)}"))
    else:
        print(color("No cookies were loaded."))

    print(color("Type commands. 'exit' or Ctrl+D to quit. 'clear' clears the screen."))

    try:
        while True:
            try:
                cwd = nice_cwd()
                header = color_bold(f"[{username} ✘ {hostname}] - [{cwd}]")
                print(header)
                raw = prompt_func(color(">>> ")).strip()
                if raw == "":
                    continue
                if raw.lower() in ("exit", "quit"):
                    print(color("[*] Exiting."))
                    break
                if raw.lower() == "clear":
                    sys.stdout.write(CLEAR_SCREEN); sys.stdout.flush(); continue

                # Support style key=value -> take the part after the last '='
                cmd = raw.split("=")[-1].strip()

                # Build simulated payload (base64->sh)
                simulated = build_payload_simulation(cmd)

                # Print in purple what *would* be sent (not sent)
                print(color("\n[SIMULATION] This would be sent to the target (NOT sent):"))
                print(color(simulated))
                print(color("\n[INFO] Logging the simulation to: " + LOGFILE + "\n"))

                # Save to local log
                log_simulation(url, cookies, cmd, simulated)

                # Simulated wait to mimic polling interval
                time.sleep(interval)

            except KeyboardInterrupt:
                print(color("\n[!] Interrupted. Use 'exit' or Ctrl+D to quit."))
                continue
            except EOFError:
                print(color("\n[!] EOF received. Exiting."))
                break
    finally:
        print(color("[*] End of simulated session."))

# ---------- CLI ----------
def main():
    parser = argparse.ArgumentParser(prog="shell_safe_template.py",
                                     description="Safe template: CLI + interactive prompt (SIMULATOR).",
                                     add_help=False)
    parser.add_argument("--url", required=False, help="Target URL (informational). Required to continue.")
    parser.add_argument("--cookies", help="Cookies file (key=value per line).")
    parser.add_argument("--interval", type=float, default=1.0, help="Simulation interval in seconds.")
    parser.add_argument("--help", action="store_true", help="Show help and examples.")
    args = parser.parse_args()

    # Show help if --url is missing or --help was requested
    if args.help or not args.url:
        print(__doc__)
        print("\nUSAGE EXAMPLE:\n  python3 shell_safe_template.py --url 'http://target/vuln.php?cmd=' --cookies cookies.txt --interval 1.0\n")
        print("Note: This script runs in SIMULATION MODE. Nothing will be executed on remote hosts.\n")
        print("cookies.txt file: key=value per line. Example:\n  PHPSESSID=abcd1234efgh5678\n  sessionid=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n  csrftoken=9f8e7d6c5b4a3\n")
        sys.exit(0)

    cookies = {}
    if args.cookies:
        try:
            cookies = load_cookies_simple(args.cookies)
        except FileNotFoundError:
            print(f"[!] Cookies file not found: {args.cookies}")
            sys.exit(1)

    # Launch interactive prompt (SIMULATION)
    interactive_loop(args.url, cookies, args.interval)

if __name__ == "__main__":
    main()
