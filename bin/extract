#!/usr/bin/env bash
# parse_nmap.sh - Minimal, pleasant Nmap output extractor
# Usage: ./parse_nmap.sh <archivo_nmap>
set -euo pipefail

# Colors (subtle)
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
RESET='\033[0m'
BOLD='\033[1m'

if [[ $# -ne 1 ]]; then
  echo -e "${RED}[âœ˜] Uso: $0 <archivo_nmap>${RESET}"
  exit 1
fi

FILE="$1"
if [[ ! -f "$FILE" ]]; then
  echo -e "${RED}[âœ˜] El archivo '$FILE' no existe.${RESET}"
  exit 1
fi

echo -e "${CYAN}\n[*] Analizando Nmap:${RESET} ${YELLOW}$FILE${RESET}\n"

# Parse Nmap: for each host capture IP and list of "port/proto state service"
# We collect per-host ports (only those with 'open' state) and service names.
# awk logic:
# - When line matches "Nmap scan report for" record current host (IP or name)
# - When line contains "/tcp" or "/udp" and "open" record port and service
awk '
/^Nmap scan report for[[:space:]]+/ {
  host = $NF
  hosts[++hcount] = host
  next
}
/\/(tcp|udp).*open/ {
  split($1, p, "/")
  port = p[1]
  svc = (NF>=3 ? $3 : "")
  # accumulate "port(service)" strings per host
  if (host == "") host = "unknown"
  if (ports[host] == "") {
    ports[host] = port "(" svc ")"
  } else {
    ports[host] = ports[host] ", " port "(" svc ")"
  }
}
END {
  if (hcount == 0) {
    # fallback: try to find any ip in file and list open ports globally
    host = ""
    for (i in ports) {
      host = i
      break
    }
  }
  for (i=1; i<=hcount; i++) {
    h = hosts[i]
    printf("%s\t%s\n", h, (ports[h]=="" ? "(no open ports found)" : ports[h]))
  }
}' "$FILE" > /tmp/.nmap_parsed.$$ || true

# If awk produced no hosts (empty), try a simple fallback using first IP & open ports
if [[ ! -s /tmp/.nmap_parsed.$$ ]]; then
  ip_address="$(grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' "$FILE" | head -n1 || true)"
  ports="$(awk '/open/ { split($1,a,"/"); printf "%s,", a[1] } END { sub(/,$/,""); print }' "$FILE" || true)"
  if [[ -z "$ip_address" && -z "$ports" ]]; then
    echo -e "${YELLOW}[!] No se encontraron hosts ni puertos abiertos en el archivo.${RESET}"
    rm -f /tmp/.nmap_parsed.$$
    exit 0
  fi
  echo -e "${ip_address:-unknown}\t${ports:-(no open ports found)}" > /tmp/.nmap_parsed.$$
fi

# Print a neat summary
total_hosts=$(wc -l < /tmp/.nmap_parsed.$$ | tr -d ' ')
echo -e "${GREEN}========================================${RESET}"
echo -e "${BOLD}Archivo:${RESET} ${YELLOW}$FILE${RESET}"
echo -e "${BOLD}Hosts encontrados:${RESET} ${YELLOW}$total_hosts${RESET}"
echo -e "${GREEN}----------------------------------------${RESET}"

first_ports_csv=""
while IFS=$'\t' read -r host portinfo; do
  # build a short ports list for display (extract numbers)
  ports_only=$(echo "$portinfo" | grep -Eo '[0-9]{1,5}' | tr '\n' ',' | sed 's/,$//')
  if [[ -z "$ports_only" ]]; then
    ports_only="(none)"
  fi
  printf " %s %-20s %s\n" "ðŸ“Œ" "${CYAN}$host${RESET}" "${YELLOW}$ports_only${RESET}"
  # capture first host ports for clipboard
  if [[ -z "$first_ports_csv" && "$ports_only" != "(none)" ]]; then
    first_ports_csv="$ports_only"
  fi
done < /tmp/.nmap_parsed.$$

echo -e "${GREEN}========================================${RESET}"

# Copy to clipboard if xclip exists (first host ports)
if command -v xclip >/dev/null 2>&1 && [[ -n "$first_ports_csv" ]]; then
  echo -n "$first_ports_csv" | xclip -selection clipboard
  echo -e "${GREEN}[âœ”] Puertos del primer host copiados al portapapeles:${RESET} ${YELLOW}$first_ports_csv${RESET}"
else
  if [[ -n "$first_ports_csv" ]]; then
    echo -e "${YELLOW}[i] Para copiar puertos automÃ¡ticamente instala xclip.${RESET}"
    echo -e "${GREEN}[âœ”] Puertos (primer host):${RESET} ${YELLOW}$first_ports_csv${RESET}"
  fi
fi

# cleanup
rm -f /tmp/.nmap_parsed.$$

exit 0
